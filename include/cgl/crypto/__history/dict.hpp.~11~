/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 dict.hpp

 2020-05-17 12:19:54

 自动生成密匙
 exsample:

 char keys[] = "0123456789abcdef";
 key_dict dict;
 dict.init();

 while(dict.execute(3, keys, strlen(keys))){
    print(dict.dict);
 }

*/
#ifndef DICT_HPP_20200517121954
#define DICT_HPP_20200517121954

#include <cgl/public.h>

namespace cgl{

class key_dict
{
public:
    const static int MAX_KEY = 64;

    char key[MAX_KEY];

private:
    byte_t buf[MAX_KEY];

public:
    void init()
    {
        memset(key, 0, MAX_KEY);
        memset(buf, 0xFF, MAX_KEY);
    }

    bool execute(size_t size, const char* keys, size_t keys_size)
    {
        if(key_step(buf, size, keys_size)){
            size_t i;
            char* p = key + key_width(buf);
            *p-- = '\0';
            for(i=0; buf[i] != 0xFF; ++i){
                *p-- = keys[buf[i]];
            }
            return true;
        }
        else{
            return false;
        }
    }

private:
    size_t key_width(byte_t buf[])
    {
        size_t n = 0;
        while(*buf++ != 0xFF){
            ++n;
        }
        return n;
    }

    //buf[] 自加一计算
    bool key_step(uint8_t* buf, size_t size, size_t max_num)
    {
        ++buf[0];
        /*
        for(size_t i=0; i<size; ){
            if(buf[i] == max_num){
                buf[i] = 0;
                ++buf[++i];
            }
            else{
                break;
            }
        }
        */
        byte_t* p = buf;
        while(*p == max_num){
            *p = 0;
            *++p;
        }

        if(buf[size] != 0xFF){
            return false;
        }

        return true;
    }
};

}//end namespace cgl

#endif //DICT_HPP_20200517121954
