/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 fft.hpp

 2020-11-09 01:05:42

 快速傅里叶变换
 Fast Fourier Transformation

*/
#ifndef FFT_HPP_20201109010542
#define FFT_HPP_20201109010542

#include <cgl/public.h>

namespace cgl{

int fft(math::complex<double> buf[], int n)
{
    int i, j, k;
    math::complex<double> s;
    math::complex<double> t;
    math::complex<double> u;

    //int M = (int) (log(n) / log(2));

    // bit reversal sorting
    j = n / 2;
    // 控制反转，排序，从低频到高频
    for (i = 1; i <= n - 2; i++) {
        if (i < j) {
            std::swap(buf[i], buf[j]);
        }
        k = n / 2;
        while (k <= j) {
            j = j - k;
            k = k / 2;
        }
        j = j + k;
    }

    // For Loops
    for(int step = 1; step <= n; step *= 2){
        k = step / 2;
        u.real = 1.0;
        u.imag = 0.0;
        s.real = cos(M_PI / k);// cos和sin消耗大量的时间，可以用定值
        s.imag = -sin(M_PI / k);
        for (j = 0; j < k; ++j) { // loop for each sub DFT
            for (i = j; i < n; i += step) {// loop for each butterfly
                t = buf[i + k] * u;
                buf[i + k] = buf[i] - t;
                buf[i] += t;
            } // Next i
//            t.real = u.real;
//            u.real = t.real * s.real - u.imag * s.imag;
//            u.imag = t.real * s.imag + u.imag * s.real;
            u *= s;
        } // Next j
    } // Next l

    return 0;
}

void fft(cp *a,int n,int inv)
{
    int bit=0;
    while ((1<<bit)<n)bit++;
    fo(i,0,n-1)
    {
        rev[i]=(rev[i>>1]>>1)|((i&1)<<(bit-1));
        if (i<rev[i])swap(a[i],a[rev[i]]);//不加这条if会交换两次（就是没交换）
    }
    for (int mid=1;mid<n;mid*=2)//mid是准备合并序列的长度的二分之一
    {
    	cp temp(cos(pi/mid),inv*sin(pi/mid));//单位根，pi的系数2已经约掉了
        for (int i=0;i<n;i+=mid*2)//mid*2是准备合并序列的长度，i是合并到了哪一位
		{
            cp omega(1,0);
            for (int j=0;j<mid;j++,omega*=temp)//只扫左半部分，得到右半部分的答案
            {
                cp x=a[i+j],y=omega*a[i+j+mid];
                a[i+j]=x+y,a[i+j+mid]=x-y;//这个就是蝴蝶变换什么的
            }
        }
    }
}

}//end namespace cgl

#endif //FFT_HPP_20201109010542
