/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 trigonometry.hpp

 2019-06-04 07:42:18

 angle360f
 angle1024f

*/
#ifndef TRIGONOMETRY_HPP_20190604074218
#define TRIGONOMETRY_HPP_20190604074218

#include <cgl/public.h>

namespace cgl{
namespace math{

#define M_A_1024     2.844444444444444444444
#define M_INV_A_1024 0.3515625

#define M_A_4096      0.087890625
#define M_INV_A_4096 11.377777777777777777778

//---------------------------------------------------------------------------
//trigonometric function

//把角度控制在区间
template<typename T>
inline void clamp_angle(T& angle, T full_angle = 360)
{
    angle = angle % full_angle;
    if(angle < 0)angle += full_angle;
}

template<>inline
void clamp_angle<float>(float& angle, float full_angle)
{
    using namespace std;
    angle = fmod(double(angle), double(full_angle));
    if(angle < 0)angle += full_angle;
}

template<>inline
void clamp_angle<double>(double& angle, double full_angle)
{
    using namespace std;
    angle = fmod(angle, full_angle);
    if(angle < 0)angle += full_angle;
}

template<>inline
void clamp_angle<long double>(long double& angle, long double full_angle)
{
    using namespace std;
    angle = fmod(angle, full_angle);
    if(angle < 0)angle += full_angle;
}

//获得弧度
inline float radian(float x, float y)
{
    float n = float();
    if(!is_zero<float>(y)){
        n = M_PI_2 - atan(x / y);//根据斜率求弧度，反向
        if(y < 0.0f)n += M_PI;
    }
    return n;
}

//获得角度，速度是查表的1/2
inline float angle(float x, float y)
{
    return radian(x, y) * M_INV_RD;
}

//angle = atan2(y, x)
//正十字坐标系
//revise 2018-07-29 17:45:39
float get_angle(float x, float y)
{
    //*
    float n;
    if(!is_zero<float>(x)){
        n = atan2(y, x);//根据斜率求弧度
        n *= M_INV_RD;
        if(n < 0.0f)n += 360.0f;
    }
    else{
        n = y < 0.0f ? 270.0f : 90.0f;
    }
    return n;
    /*/上面比较快，测试angle(x, y)最快
    float n = 0.0f;
    if(!is_zero<float>(y)){
        n = std::atan2(x, y);
        n /= M_RD;
        n -= 90.0f;
        n = -n;
        if(n < 0.0f)n += 360.0f;
    }
    else if(x < 0.0f){
        n = 180.0f;
    }
    return n;
    //*/

}


//平滑矢量圆形步进
//根据周长计算步进
//步进 = sqrt(周长)
//最小步进 = 周长 < 100 = 24
int ellipse_steps(int cx, int cy)
{
    int r = std::max(cx, cy);
    int s = M_PI * r * 2;
    int steps = s;

    if(s < 100){
        steps = 24;
    }
    else{
        steps = sqrt((float)steps) * 1.0;
        steps += 3;//对齐到4字节，对称
        steps &= ~3;
    }
    return steps;
}

//---------------------------------------------------------------------------
//sin cos 查表算法
//sin cos 换算
//sin^2x + cos^2x = 1
//sinx = cos(90 - x)
//cosx = sin(90 - x)
//sin(90 + x) = cosx
//sin(270 + x) = - cosx
//cos(90 + x) = - sinx
//cos(270 + x) = sinx

#if 0

template<typename T, int FULL_ANGLE = 1024>
class fast_trimath
{
public:
    typedef T value_type;

    const static int full_angle = const_next_pow2<FULL_ANGLE>::value;

    const static int eighth    = full_angle / 8;
    const static int quarter_1 = full_angle / 4;
    const static int quarter_2 = full_angle / 2;
    const static int quarter_3 = quarter_1 + quarter_2;

    //int 模式精度
    const static int PRECICION = T(0.5) == 0 ? FULL_ANGLE * 4 : 1;
    const static int ANGLE_SHIFT = const_ilog2<FULL_ANGLE>::value;
    const static int ANGLE_MASK = full_angle - 1;

    const static float ANGLE;
    const static float INV_ANGLE;

    //int 模式最大操作数
    //const static int max_numeric = is_float<T>::value ? INT_MAX : INT_MAX / precision;

    const static int TABLE_SIZE = eighth + 1;

    static fast_trimath instance;

protected:
    const static value_type sinTable[TABLE_SIZE];
    const static value_type atanTable[TABLE_SIZE];

public:
    inline value_type sin(int angle)
    {
        angle &= ANGLE_MASK;

        if(angle <= quarter_1)
            return sinTable[angle];
        else if(angle <= quarter_2)
            return sinTable[quarter_2 - angle];
        else if(angle <= quarter_3)
            return -sinTable[angle - quarter_2];
        else
            return -sinTable[full_angle - angle];
    }

    inline value_type cos(int angle)
    {
        return this->sin(angle + quarter_1);
    }

    inline value_type angle(int x, int y)
    {
        int a = x, b = y;
        int c = 0;

        if(a < 0)a = -a;
        if(y < 0)b = -b;

        if(a < b){//swap
            c = b;
            b = a;
            a = c;
            c = 1;
        }

        a = (b == 0) ? (0) : (b * eighth / a);
        value_type angle = atanTable[a];

        //fix quarter
        if(c)angle = quarter_1 - angle;
        if(x < 0){
            if(y < 0){//quarter 3
                angle += quarter_2;
            }
            else{//quarter 2
                angle = quarter_2 - angle;
            }
        }
        else{
            if (y < 0){//quarter 4
                angle = full_angle - angle;
            }
        }

        return angle;
    }

    vec2<value_type> rotate(int angle, value_type r)
    {
        if(is_float<value_type>::value){
            return vec2<value_type>(this->cos(angle) * r, -this->sin(angle) * r);
        }
        else{
            return vec2<value_type>(this->cos(angle) * r / PRECICION, -this->sin(angle) * r / PRECICION);
        }
    }

    //to angle360
    inline int to_angle360(int n)
    {
        return n * 360 / full_angle;
    }

    inline float to_angle360(float n)
    {
        return n * ANGLE;
    }

    //to angle1024
    inline int from_angle360(int n)
    {
        return n * full_angle / 360;
    }

    inline int from_angle360(float n)
    {
        return f_toint(n * INV_ANGLE);
    }

    inline value_type sin360(value_type n)
    {
        return this->sin(from_angle360(n));
    }

    inline value_type cos360(value_type n)
    {
        return this->sin(from_angle360(n));
    }

    inline value_type angle360(value_type x, value_type y)
    {
        return to_angle360(angle(x, y));
    }

    vec2<value_type> rotate360(value_type angle, value_type r)
    {
        int n = from_angle360(angle);
        return this->point(n, r);
    }

private:
    static value_type init_sinTable();
    static value_type init_atanTable();
};

template<typename T, int A>
const float fast_trimath<T, A>::ANGLE = 360.0 / fast_trimath<T, A>::full_angle;

template<typename T, int A>
const float fast_trimath<T, A>::INV_ANGLE = fast_trimath<T, A>::full_angle / 360.0;

template<typename T, int A>
fast_trimath<T, A> fast_trimath<T, A>::instance = fast_trimath<T, A>();

template<typename T, int A>
const T fast_trimath<T, A>::sinTable[fast_trimath<T, A>::TABLE_SIZE] = {fast_trimath<T, A>::init_sinTable()};

template<typename T, size_t A>
const T fast_trimath<T, A>::atanTable[fast_atan<T, A>::TABLE_SIZE] = {fast_trimath<T, A>::init_atanTable()};

template<typename T, int A>
T fast_trimath<T, A>::init_sinTable()
{
    for(int i = 0; i < TABLE_SIZE; ++i){
        const_cast<T&>(sinTable[i]) = std::sin(i * 360.0 * M_RD / full_angle) * PRECICION;
    }
    return 0;
}

template<typename T, size_t A>
T fast_trimath<T, A>::init_atanTable()
{
    for(int i = 0; i < TABLE_SIZE; ++i){
        const_cast<T&>(atanTable[i]) = std::atan(i / double(eighth)) * M_INV_RD * eighth / 45.0;
    }
    return 0;
}

inline float fast_sin(int angle)
{
    return fast_trimath<float, 1024>::instance.sin(angle);
}

inline float fast_cos(int angle)
{
    return fast_trimath<float, 1024>::instance.cos(angle);
}

inline float fast_angle(int x, int y)
{
    return fast_trimath<float, 1024>::instance.angle(x, y);
}

inline float fast_sinf(float angle)
{
    return fast_trimath<float, 1024>::instance.sin360(angle);
}

inline float fast_cosf(float angle)
{
    return fast_trimath<float, 1024>::instance.cos360(angle);
}

inline float fast_anglef(float x, float y)
{
    return fast_trimath<float, 1024>::instance.angle360(x, y);
}

#endif

static float fsinTable[] = {
    0.0000000000000000, 0.0015339801862848, 0.0030679567629660, 0.0046019261204486, 0.0061358846491545, 0.0076698287395311, 0.0092037547820598, 0.0107376591672645, 0.0122715382857199, 0.0138053885280604, 0.0153392062849881, 0.0168729879472817, 0.0184067299058048, 0.0199404285515144, 0.0214740802754695, 0.0230076814688394,
    0.0245412285229123, 0.0260747178291039, 0.0276081457789657, 0.0291415087641937, 0.0306748031766366, 0.0322080254083046, 0.0337411718513776, 0.0352742388982139, 0.0368072229413588, 0.0383401203735527, 0.0398729275877398, 0.0414056409770767, 0.0429382569349408, 0.0444707718549387, 0.0460031821309146, 0.0475354841569593,
    0.0490676743274180, 0.0505997490368993, 0.0521317046802833, 0.0536635376527305, 0.0551952443496899, 0.0567268211669077, 0.0582582645004358, 0.0597895707466399, 0.0613207363022086, 0.0628517575641614, 0.0643826309298575, 0.0659133527970038, 0.0674439195636641, 0.0689743276282667, 0.0705045733896139, 0.0720346532468893,
    0.0735645635996674, 0.0750943008479213, 0.0766238613920315, 0.0781532416327942, 0.0796824379714301, 0.0812114468095924, 0.0827402645493757, 0.0842688875933241, 0.0857973123444399, 0.0873255352061921, 0.0888535525825246, 0.0903813608778650, 0.0919089564971327, 0.0934363358457478, 0.0949634953296390, 0.0964904313552526,
    0.0980171403295606, 0.0995436186600693, 0.1010698627548278, 0.1025958690224363, 0.1041216338720546, 0.1056471537134106, 0.1071724249568088, 0.1086974440131387, 0.1102222072938831, 0.1117467112111266, 0.1132709521775643, 0.1147949266065101, 0.1163186309119048, 0.1178420615083250, 0.1193652148109914, 0.1208880872357771,
    0.1224106751992162, 0.1239329751185122, 0.1254549834115462, 0.1269766964968859, 0.1284981107937932, 0.1300192227222333, 0.1315400287028831, 0.1330605251571391, 0.1345807085071262, 0.1361005751757062, 0.1376201215864860, 0.1391393441638262, 0.1406582393328492, 0.1421768035194481, 0.1436950331502945, 0.1452129246528475,
    0.1467304744553617, 0.1482476789868960, 0.1497645346773215, 0.1512810379573302, 0.1527971852584434, 0.1543129730130201, 0.1558283976542652, 0.1573434556162382, 0.1588581433338614, 0.1603724572429283, 0.1618863937801118, 0.1633999493829732, 0.1649131204899699, 0.1664259035404641, 0.1679382949747312, 0.1694502912339680,
    0.1709618887603012, 0.1724730839967960, 0.1739838733874638, 0.1754942533772714, 0.1770042204121487, 0.1785137709389975, 0.1800229014056995, 0.1815316082611250, 0.1830398879551410, 0.1845477369386196, 0.1860551516634466, 0.1875621285825296, 0.1890686641498062, 0.1905747548202528, 0.1920803970498924, 0.1935855872958036,
    0.1950903220161282, 0.1965945976700802, 0.1980984107179536, 0.1996017576211310, 0.2011046348420919, 0.2026070388444211, 0.2041089660928169, 0.2056104130530992, 0.2071113761922186, 0.2086118519782635, 0.2101118368804696, 0.2116113273692276, 0.2131103199160914, 0.2146088109937868, 0.2161067970762195, 0.2176042746384836,
    0.2191012401568698, 0.2205976901088735, 0.2220936209732035, 0.2235890292297900, 0.2250839113597928, 0.2265782638456100, 0.2280720831708857, 0.2295653658205189, 0.2310581082806711, 0.2325503070387752, 0.2340419585835434, 0.2355330594049755, 0.2370236059943672, 0.2385135948443184, 0.2400030224487415, 0.2414918853028693,
    0.2429801799032639, 0.2444679027478242, 0.2459550503357946, 0.2474416191677733, 0.2489276057457201, 0.2504130065729653, 0.2518978181542170, 0.2533820369955702, 0.2548656596045146, 0.2563486824899429, 0.2578311021621590, 0.2593129151328862, 0.2607941179152755, 0.2622747070239136, 0.2637546789748313, 0.2652340302855118,
    0.2667127574748984, 0.2681908570634032, 0.2696683255729151, 0.2711451595268080, 0.2726213554499490, 0.2740969098687064, 0.2755718193109581, 0.2770460803060999, 0.2785196893850531, 0.2799926430802732, 0.2814649379257580, 0.2829365704570554, 0.2844075372112719, 0.2858778347270806, 0.2873474595447295, 0.2888164082060495,
    0.2902846772544623, 0.2917522632349893, 0.2932191626942586, 0.2946853721805143, 0.2961508882436238, 0.2976157074350863, 0.2990798263080405, 0.3005432414172735, 0.3020059493192281, 0.3034679465720113, 0.3049292297354024, 0.3063897953708609, 0.3078496400415349, 0.3093087603122687, 0.3107671527496115, 0.3122248139218249,
    0.3136817403988915, 0.3151379287525224, 0.3165933755561658, 0.3180480773850149, 0.3195020308160157, 0.3209552324278752, 0.3224076788010699, 0.3238593665178529, 0.3253102921622629, 0.3267604523201317, 0.3282098435790926, 0.3296584625285875, 0.3311063057598764, 0.3325533698660442, 0.3339996514420094, 0.3354451470845316,
    0.3368898533922201, 0.3383337669655411, 0.3397768844068269, 0.3412192023202824, 0.3426607173119944, 0.3441014259899389, 0.3455413249639891, 0.3469804108459237, 0.3484186802494346, 0.3498561297901349, 0.3512927560855671, 0.3527285557552107, 0.3541635254204903, 0.3555976617047839, 0.3570309612334300, 0.3584634206337366,
    0.3598950365349882, 0.3613258055684543, 0.3627557243673972, 0.3641847895670799, 0.3656129978047739, 0.3670403457197672, 0.3684668299533723, 0.3698924471489341, 0.3713171939518375, 0.3727410670095158, 0.3741640629714580, 0.3755861784892172, 0.3770074102164183, 0.3784277548087656, 0.3798472089240512, 0.3812657692221624,
    0.3826834323650898, 0.3841001950169350, 0.3855160538439188, 0.3869310055143886, 0.3883450466988263, 0.3897581740698565, 0.3911703843022539, 0.3925816740729515, 0.3939920400610481, 0.3954014789478164, 0.3968099874167103, 0.3982175621533736, 0.3996241998456468, 0.4010298971835756, 0.4024346508594184, 0.4038384575676541,
    0.4052413140049899, 0.4066432168703690, 0.4080441628649787, 0.4094441486922576, 0.4108431710579039, 0.4122412266698829, 0.4136383122384345, 0.4150344244760816, 0.4164295600976372, 0.4178237158202123, 0.4192168883632240, 0.4206090744484025, 0.4220002707997997, 0.4233904741437960, 0.4247796812091088, 0.4261678887267996,
    0.4275550934302821, 0.4289412920553295, 0.4303264813400826, 0.4317106580250573, 0.4330938188531520, 0.4344759605696557, 0.4358570799222555, 0.4372371736610441, 0.4386162385385277, 0.4399942713096333, 0.4413712687317167, 0.4427472275645700, 0.4441221445704292, 0.4454960165139817, 0.4468688401623742, 0.4482406122852199,
    0.4496113296546066, 0.4509809890451039, 0.4523495872337709, 0.4537171210001639, 0.4550835871263438, 0.4564489823968839, 0.4578133035988772, 0.4591765475219441, 0.4605387109582400, 0.4618997907024628, 0.4632597835518602, 0.4646186863062378, 0.4659764957679662, 0.4673332087419884, 0.4686888220358279, 0.4700433324595956,
    0.4713967368259976, 0.4727490319503428, 0.4741002146505500, 0.4754502817471559, 0.4767992300633221, 0.4781470564248431, 0.4794937576601530, 0.4808393306003340, 0.4821837720791227, 0.4835270789329187, 0.4848692480007911, 0.4862102761244864, 0.4875501601484360, 0.4888888969197632, 0.4902264832882912, 0.4915629161065499,
    0.4928981922297840, 0.4942323085159597, 0.4955652618257725, 0.4968970490226545, 0.4982276669727819, 0.4995571125450819, 0.5008853826112407, 0.5022124740457108, 0.5035383837257176, 0.5048631085312676, 0.5061866453451552, 0.5075089910529709, 0.5088301425431070, 0.5101500967067668, 0.5114688504379704, 0.5127864006335630,
    0.5141027441932218, 0.5154178780194629, 0.5167317990176499, 0.5180445040959993, 0.5193559901655896, 0.5206662541403672, 0.5219752929371544, 0.5232831034756564, 0.5245896826784689, 0.5258950274710847, 0.5271991347819013, 0.5285020015422285, 0.5298036246862946, 0.5311040011512550, 0.5324031278771979, 0.5337010018071530,
    0.5349976198870972, 0.5362929790659632, 0.5375870762956454, 0.5388799085310084, 0.5401714727298930, 0.5414617658531234, 0.5427507848645159, 0.5440385267308838, 0.5453249884220465, 0.5466101669108349, 0.5478940591731002, 0.5491766621877197, 0.5504579729366048, 0.5517379884047073, 0.5530167055800275, 0.5542941214536201,
    0.5555702330196022, 0.5568450372751601, 0.5581185312205561, 0.5593907118591361, 0.5606615761973360, 0.5619311212446895, 0.5631993440138341, 0.5644662415205195, 0.5657318107836131, 0.5669960488251087, 0.5682589526701316, 0.5695205193469471, 0.5707807458869673, 0.5720396293247570, 0.5732971666980422, 0.5745533550477158,
    0.5758081914178453, 0.5770616728556794, 0.5783137964116556, 0.5795645591394057, 0.5808139580957645, 0.5820619903407755, 0.5833086529376983, 0.5845539429530153, 0.5857978574564389, 0.5870403935209180, 0.5882815482226452, 0.5895213186410639, 0.5907597018588742, 0.5919966949620410, 0.5932322950397998, 0.5944664991846644,
    0.5956993044924334, 0.5969307080621965, 0.5981607069963423, 0.5993892984005645, 0.6006164793838690, 0.6018422470585800, 0.6030665985403482, 0.6042895309481560, 0.6055110414043255, 0.6067311270345246, 0.6079497849677736, 0.6091670123364532, 0.6103828062763095, 0.6115971639264619, 0.6128100824294097, 0.6140215589310384,
    0.6152315905806268, 0.6164401745308536, 0.6176473079378039, 0.6188529879609763, 0.6200572117632892, 0.6212599765110876, 0.6224612793741500, 0.6236611175256945, 0.6248594881423863, 0.6260563884043435, 0.6272518154951441, 0.6284457666018327, 0.6296382389149270, 0.6308292296284245, 0.6320187359398091, 0.6332067550500573,
    0.6343932841636455, 0.6355783204885561, 0.6367618612362842, 0.6379439036218441, 0.6391244448637757, 0.6403034821841517, 0.6414810128085832, 0.6426570339662269, 0.6438315428897915, 0.6450045368155439, 0.6461760129833164, 0.6473459686365121, 0.6485144010221124, 0.6496813073906832, 0.6508466849963809, 0.6520105310969595,
    0.6531728429537768, 0.6543336178318004, 0.6554928529996153, 0.6566505457294290, 0.6578066932970786, 0.6589612929820373, 0.6601143420674205, 0.6612658378399923, 0.6624157775901718, 0.6635641586120398, 0.6647109782033448, 0.6658562336655097, 0.6669999223036375, 0.6681420414265185, 0.6692825883466361, 0.6704215603801731,
    0.6715589548470184, 0.6726947690707729, 0.6738290003787560, 0.6749616461020119, 0.6760927035753159, 0.6772221701371803, 0.6783500431298615, 0.6794763198993650, 0.6806009977954530, 0.6817240741716498, 0.6828455463852481, 0.6839654117973154, 0.6850836677727004, 0.6862003116800386, 0.6873153408917591, 0.6884287527840904,
    0.6895405447370668, 0.6906507141345346, 0.6917592583641577, 0.6928661748174246, 0.6939714608896540, 0.6950751139800009, 0.6961771314914630, 0.6972775108308865, 0.6983762494089729, 0.6994733446402838, 0.7005687939432483, 0.7016625947401685, 0.7027547444572253, 0.7038452405244849, 0.7049340803759049, 0.7060212614493399,
    0.7071067811865475, 0.7081906370331953, 0.7092728264388656, 0.7103533468570623, 0.7114321957452164, 0.7125093705646923, 0.7135848687807935, 0.7146586878627690, 0.7157308252838187, 0.7168012785210995, 0.7178700450557317, 0.7189371223728044, 0.7200025079613817, 0.7210661993145081, 0.7221281939292153, 0.7231884893065273,
    0.7242470829514669, 0.7253039723730607, 0.7263591550843460, 0.7274126286023758, 0.7284643904482252, 0.7295144381469970, 0.7305627692278276, 0.7316093812238925, 0.7326542716724128, 0.7336974381146603, 0.7347388780959634, 0.7357785891657135, 0.7368165688773698, 0.7378528147884660, 0.7388873244606152, 0.7399200954595161,
    0.7409511253549591, 0.7419804117208310, 0.7430079521351217, 0.7440337441799292, 0.7450577854414659, 0.7460800735100638, 0.7471006059801801, 0.7481193804504035, 0.7491363945234593, 0.7501516458062151, 0.7511651319096864, 0.7521768504490427, 0.7531867990436124, 0.7541949753168892, 0.7552013768965365, 0.7562060014143945,
    0.7572088465064845, 0.7582099098130153, 0.7592091889783881, 0.7602066816512024, 0.7612023854842618, 0.7621962981345789, 0.7631884172633813, 0.7641787405361167, 0.7651672656224590, 0.7661539901963128, 0.7671389119358204, 0.7681220285233653, 0.7691033376455796, 0.7700828369933480, 0.7710605242618137, 0.7720363971503845,
    0.7730104533627370, 0.7739826906068228, 0.7749531065948738, 0.7759216990434076, 0.7768884656732324, 0.7778534042094530, 0.7788165123814759, 0.7797777879230144, 0.7807372285720945, 0.7816948320710594, 0.7826505961665757, 0.7836045186096382, 0.7845565971555752, 0.7855068295640539, 0.7864552135990858, 0.7874017470290313,
    0.7883464276266062, 0.7892892531688857, 0.7902302214373100, 0.7911693302176902, 0.7921065773002124, 0.7930419604794436, 0.7939754775543372, 0.7949071263282370, 0.7958369046088835, 0.7967648102084187, 0.7976908409433910, 0.7986149946347608, 0.7995372691079050, 0.8004576621926227, 0.8013761717231402, 0.8022927955381157,
    0.8032075314806449, 0.8041203773982657, 0.8050313311429637, 0.8059403905711763, 0.8068475535437992, 0.8077528179261904, 0.8086561815881750, 0.8095576424040513, 0.8104571982525948, 0.8113548470170637, 0.8122505865852039, 0.8131444148492536, 0.8140363297059483, 0.8149263290565266, 0.8158144108067338, 0.8167005728668278,
    0.8175848131515837, 0.8184671295802987, 0.8193475200767970, 0.8202259825694347, 0.8211025149911046, 0.8219771152792416, 0.8228497813758263, 0.8237205112273913, 0.8245893027850253, 0.8254561540043774, 0.8263210628456634, 0.8271840272736690, 0.8280450452577558, 0.8289041147718649, 0.8297612337945230, 0.8306164003088463,
    0.8314696123025452, 0.8323208677679297, 0.8331701647019132, 0.8340175011060181, 0.8348628749863800, 0.8357062843537526, 0.8365477272235119, 0.8373872016156619, 0.8382247055548381, 0.8390602370703126, 0.8398937941959995, 0.8407253749704581, 0.8415549774368983, 0.8423825996431860, 0.8432082396418454, 0.8440318954900664,
    0.8448535652497070, 0.8456732469872991, 0.8464909387740520, 0.8473066386858583, 0.8481203448032973, 0.8489320552116396, 0.8497417680008524, 0.8505494812656034, 0.8513551931052652, 0.8521589016239198, 0.8529606049303636, 0.8537603011381113, 0.8545579883654005, 0.8553536647351960, 0.8561473283751945, 0.8569389774178288,
    0.8577286100002721, 0.8585162242644427, 0.8593018183570084, 0.8600853904293901, 0.8608669386377673, 0.8616464611430813, 0.8624239561110405, 0.8631994217121242, 0.8639728561215867, 0.8647442575194624, 0.8655136240905691, 0.8662809540245130, 0.8670462455156926, 0.8678094967633032, 0.8685707059713409, 0.8693298713486067,
    0.8700869911087113, 0.8708420634700790, 0.8715950866559511, 0.8723460588943915, 0.8730949784182901, 0.8738418434653669, 0.8745866522781761, 0.8753294031041108, 0.8760700941954066, 0.8768087238091458, 0.8775452902072612, 0.8782797916565415, 0.8790122264286335, 0.8797425928000474, 0.8804708890521608, 0.8811971134712220,
    0.8819212643483550, 0.8826433399795628, 0.8833633386657316, 0.8840812587126350, 0.8847970984309378, 0.8855108561362000, 0.8862225301488806, 0.8869321187943422, 0.8876396204028539, 0.8883450333095962, 0.8890483558546646, 0.8897495863830729, 0.8904487232447579, 0.8911457647945832, 0.8918407093923427, 0.8925335554027647,
    0.8932243011955153, 0.8939129451452033, 0.8945994856313827, 0.8952839210385576, 0.8959662497561851, 0.8966464701786802, 0.8973245807054183, 0.8980005797407399, 0.8986744656939538, 0.8993462369793415, 0.9000158920161603, 0.9006834292286469, 0.9013488470460220, 0.9020121439024932, 0.9026733182372588, 0.9033323684945118,
    0.9039892931234433, 0.9046440905782462, 0.9052967593181188, 0.9059472978072685, 0.9065957045149153, 0.9072419779152959, 0.9078861164876662, 0.9085281187163061, 0.9091679830905224, 0.9098057081046522, 0.9104412922580671, 0.9110747340551762, 0.9117060320054299, 0.9123351846233227, 0.9129621904283981, 0.9135870479452508,
    0.9142097557035307, 0.9148303122379461, 0.9154487160882678, 0.9160649657993317, 0.9166790599210427, 0.9172909970083779, 0.9179007756213904, 0.9185083943252123, 0.9191138516900578, 0.9197171462912274, 0.9203182767091105, 0.9209172415291895, 0.9215140393420419, 0.9221086687433451, 0.9227011283338786, 0.9232914167195276,
    0.9238795325112867, 0.9244654743252626, 0.9250492407826776, 0.9256308305098727, 0.9262102421383113, 0.9267874743045817, 0.9273625256504011, 0.9279353948226179, 0.9285060804732155, 0.9290745812593159, 0.9296408958431813, 0.9302050228922191, 0.9307669610789837, 0.9313267090811804, 0.9318842655816681, 0.9324396292684624,
    0.9329927988347388, 0.9335437729788362, 0.9340925504042589, 0.9346391298196808, 0.9351835099389476, 0.9357256894810804, 0.9362656671702783, 0.9368034417359216, 0.9373390119125750, 0.9378723764399899, 0.9384035340631081, 0.9389324835320646, 0.9394592236021899, 0.9399837530340139, 0.9405060705932683, 0.9410261750508893,
    0.9415440651830208, 0.9420597397710173, 0.9425731976014469, 0.9430844374660935, 0.9435934581619604, 0.9441002584912727, 0.9446048372614803, 0.9451071932852606, 0.9456073253805213, 0.9461052323704033, 0.9466009130832836, 0.9470943663527772, 0.9475855910177411, 0.9480745859222762, 0.9485613499157303, 0.9490458818527006,
    0.9495281805930367, 0.9500082450018430, 0.9504860739494817, 0.9509616663115751, 0.9514350209690083, 0.9519061368079323, 0.9523750127197659, 0.9528416476011987, 0.9533060403541938, 0.9537681898859903, 0.9542280951091057, 0.9546857549413383, 0.9551411683057708, 0.9555943341307711, 0.9560452513499964, 0.9564939189023950,
    0.9569403357322089, 0.9573845007889759, 0.9578264130275329, 0.9582660714080177, 0.9587034748958716, 0.9591386224618419, 0.9595715130819845, 0.9600021457376660, 0.9604305194155658, 0.9608566331076797, 0.9612804858113206, 0.9617020765291225, 0.9621214042690416, 0.9625384680443592, 0.9629532668736839, 0.9633657997809540,
    0.9637760657954398, 0.9641840639517457, 0.9645897932898128, 0.9649932528549203, 0.9653944416976894, 0.9657933588740836, 0.9661900034454126, 0.9665843744783331, 0.9669764710448521, 0.9673662922223285, 0.9677538370934755, 0.9681391047463623, 0.9685220942744173, 0.9689028047764289, 0.9692812353565485, 0.9696573851242924,
    0.9700312531945440, 0.9704028386875555, 0.9707721407289504, 0.9711391584497251, 0.9715038909862518, 0.9718663374802794, 0.9722264970789363, 0.9725843689347322, 0.9729399522055602, 0.9732932460546982, 0.9736442496508119, 0.9739929621679558, 0.9743393827855759, 0.9746835106885107, 0.9750253450669941, 0.9753648851166569,
    0.9757021300385286, 0.9760370790390390, 0.9763697313300211, 0.9767000861287118, 0.9770281426577544, 0.9773539001452000, 0.9776773578245099, 0.9779985149345571, 0.9783173707196277, 0.9786339244294231, 0.9789481753190622, 0.9792601226490820, 0.9795697656854405, 0.9798771036995176, 0.9801821359681174, 0.9804848617734694,
    0.9807852804032304, 0.9810833911504866, 0.9813791933137546, 0.9816726861969831, 0.9819638691095552, 0.9822527413662894, 0.9825393022874412, 0.9828235511987052, 0.9831054874312163, 0.9833851103215512, 0.9836624192117303, 0.9839374134492189, 0.9842100923869290, 0.9844804553832209, 0.9847485018019042, 0.9850142310122398,
    0.9852776423889412, 0.9855387353121761, 0.9857975091675674, 0.9860539633461954, 0.9863080972445987, 0.9865599102647754, 0.9868094018141854, 0.9870565713057510, 0.9873014181578584, 0.9875439417943592, 0.9877841416445722, 0.9880220171432835, 0.9882575677307495, 0.9884907928526966, 0.9887216919603238, 0.9889502645103030,
    0.9891765099647810, 0.9894004277913804, 0.9896220174632008, 0.9898412784588205, 0.9900582102622971, 0.9902728123631691, 0.9904850842564571, 0.9906950254426646, 0.9909026354277800, 0.9911079137232768, 0.9913108598461154, 0.9915114733187439, 0.9917097536690995, 0.9919057004306093, 0.9920993131421918, 0.9922905913482574,
    0.9924795345987100, 0.9926661424489480, 0.9928504144598651, 0.9930323501978514, 0.9932119492347945, 0.9933892111480807, 0.9935641355205953, 0.9937367219407246, 0.9939069700023561, 0.9940748793048794, 0.9942404494531879, 0.9944036800576791, 0.9945645707342554, 0.9947231211043257, 0.9948793307948056, 0.9950331994381186,
    0.9951847266721969, 0.9953339121404823, 0.9954807554919269, 0.9956252563809943, 0.9957674144676598, 0.9959072294174117, 0.9960447009012520, 0.9961798285956970, 0.9963126121827780, 0.9964430513500426, 0.9965711457905548, 0.9966968952028961, 0.9968202992911657, 0.9969413577649822, 0.9970600703394830, 0.9971764367353262,
    0.9972904566786902, 0.9974021299012753, 0.9975114561403035, 0.9976184351385196, 0.9977230666441916, 0.9978253504111116, 0.9979252861985960, 0.9980228737714862, 0.9981181129001492, 0.9982110033604782, 0.9983015449338929, 0.9983897374073402, 0.9984755805732948, 0.9985590742297593, 0.9986402181802653, 0.9987190122338729,
    0.9987954562051724, 0.9988695499142836, 0.9989412931868569, 0.9990106858540734, 0.9990777277526454, 0.9991424187248169, 0.9992047586183639, 0.9992647472865944, 0.9993223845883495, 0.9993776703880028, 0.9994306045554617, 0.9994811869661669, 0.9995294175010931, 0.9995752960467492, 0.9996188224951786, 0.9996599967439592,
    0.9996988186962042, 0.9997352882605617, 0.9997694053512153, 0.9998011698878843, 0.9998305817958234, 0.9998576410058239, 0.9998823474542126, 0.9999047010828529, 0.9999247018391445, 0.9999423496760239, 0.9999576445519639, 0.9999705864309741, 0.9999811752826011, 0.9999894110819284, 0.9999952938095762, 0.9999988234517019,
    1.0000000000000000
};

static float fatanTable[] = {
    0.0000000000000000, 1.2732379257310651, 2.5464661375264779, 3.8196749218952424, 5.0928545662356264, 6.3659953592796636, 7.6390875915375060, 8.9121215557415745, 10.1850875472904452, 11.4579758646924521, 12.7307768100089032, 14.0034806892969232, 15.2760778130518151, 16.5485584966489228, 17.8209130607849495, 19.0931318319186403,
    20.3652051427108347, 21.6371233324637906, 22.9088767475597699, 24.1804557418988111, 25.4518506773356243, 26.7230519241156230, 27.9940498613099571, 29.2648348772495766, 30.5353973699582255, 31.8057277475843350, 33.0758164288317857, 34.3456538433894494, 35.6152304323594890, 36.8845366486844100, 38.1535629575726887, 39.4222998369231234,
    40.6907377777476427, 41.9588672845927064, 43.2266788759591947, 44.4941630847206397, 45.7613104585399313, 47.0281115602843442, 48.2945569684387976, 49.5606372775174648, 50.8263430984735010, 52.0916650591069938, 53.3565938044710038, 54.6211199972756702, 55.8852343182904221, 57.1489274667440768, 58.4121901607229859, 59.6750131375670279,
    60.9373871542634902, 62.1993029878388199, 63.4607514357480795, 64.7217233162622279, 65.9822094688530854, 67.2422007545759754, 68.5016880564499644, 69.7606622798357847, 71.0191143528112150, 72.2770352265440863, 73.5344158756626456, 74.7912472986235457, 76.0475205180770928, 77.3032265812299215, 78.5583565602051124, 79.8129015523994809,
    81.0668526808382381, 82.3202010945268796, 83.5729379688003178, 84.8250545056691152, 86.0765419341629752, 87.3273915106712906, 88.5775945192808649, 89.8271422721105637, 91.0760261096431662, 92.3242374010540914, 93.5717675445371952, 94.8186079676275000, 96.0647501275208242, 97.3101855113903298, 98.5549056366999849, 99.7989020515148297,
    101.0421663348081296, 102.2846900967652317, 103.5264649790843663, 104.7674826552740228, 106.0077348309472427, 107.2472132441125012, 108.4859096654613779, 109.7238158986528163, 110.9609237805941575, 112.1972251817187072, 113.4327120062599761, 114.6673761925225676, 115.9012097131495409, 117.1342045753865193, 118.3663528213421188, 119.5976465282452068,
    120.8280778086984242, 122.0576388109284096, 123.2863217190324150, 124.5141187532214957, 125.7410221700600914, 126.9670242627021395, 128.1921173611236213, 129.4162938323515562, 130.6395460806894278, 131.8618665479390586, 133.0832477136188459, 134.3036820951785160, 135.5231622482101557, 136.7416807666557190, 137.9592302830109816, 139.1758034685256575,
    140.3913930334002487, 141.6059917269789423, 142.8195923379390138, 144.0321876944766757, 145.2437706644892046, 146.4543341557533722, 147.6638711161004949, 148.8723745335875037, 150.0798374366646044, 151.2862528943393556, 152.4916140163368254, 153.6959139532564791, 154.8991458967250878, 156.1013030795463976, 157.3023787758466483, 158.5023663012171085,
    159.7012590128523755, 160.8990503096855491, 162.0957336325194831, 163.2913024641545690, 164.4857503295129959, 165.6790707957591167, 166.8712574724167439, 168.0623040114822970, 169.2522041075347658, 170.4409514978420930, 171.6285399624637762, 172.8149633243501455, 174.0002154494381443, 175.1842902467432736, 176.3671816684484384, 177.5488837099890702,
    178.7293904101346982, 179.9086958510673071, 181.0867941584560015, 182.2636795015282587, 183.4393460931378854, 184.6137881898294211, 185.7870000918992446, 186.9589761434530715, 188.1297107324604099, 189.2991982908053785, 190.4674332943343131, 191.6344102628999906, 192.8001237604026130, 193.9645683948274382, 195.1277388182791128, 196.2896297270128230,
    197.4502358614621471, 198.6095520062637547, 199.7675729902787509, 200.9242936866110085, 202.0797090126222884, 203.2338139299441480, 204.3866034444867523, 205.5380726064446435, 206.6882165102993554, 207.8370302948189874, 208.9845091430546802, 210.1306482823342492, 211.2754429842526349, 212.4188885646593406, 213.5609803836431411, 214.7017138455136944,
    215.8410843987802536, 216.9790875361274516, 218.1157187943884708, 219.2509737545148880, 220.3848480415443305, 221.5173373245647213, 222.6484373166761941, 223.7781437749500242, 224.9064525003850008, 226.0333593378609010, 227.1588601760895472, 228.2829509475629095, 229.4056276284989338, 230.5268862387843853, 231.6467228419155333, 232.7651335449359351,
    233.8821144983718625, 234.9976618961652832, 236.1117719756041993, 237.2244410172507116, 238.3356653448665270, 239.4454413253362475, 240.5537653685881026, 241.6606339275123503, 242.7660434978776607, 243.8699906182447990, 244.9724718698782624, 246.0734838766557289, 247.1730233049752314, 248.2710868636600026, 249.3676713038615560, 250.4627734189601256,
    251.5563900444634840, 252.6485180579034022, 253.7391543787300918, 254.8282959682047420, 255.9159398292899823, 257.0020830065383848, 258.0867225859789755, 259.1698556950020134, 260.2514795022417502, 261.3315912174571736, 262.4101880914113849, 263.4872674157485904, 264.5628265228698410, 265.6368627858066702, 266.7093736180930818, 267.7803564736361182,
    268.8498088465842102, 269.9177282711945054, 270.9841123216980350, 272.0489586121636876, 273.1122647963604777, 274.1740285676181088, 275.2342476586865132, 276.2929198415931182, 277.3500429274996577, 278.4056147665564822, 279.4596332477564715, 280.5120962987867870, 281.5630018858798280, 282.6123480136623698, 283.6601327250037912, 284.7063541008629386,
    285.7510102601336826, 286.7940993594891097, 287.8356195932248056, 288.8755691931009437, 289.9139464281827259, 290.9507496046807091, 291.9859770657886884, 293.0196271915219200, 294.0516983985531283, 295.0821891400482855, 296.1110979055009125, 297.1384232205656417, 298.1641636468908132, 299.1883177819500474, 300.2108842588730226, 301.2318617462752854,
    302.2512489480873796, 303.2690446033826674, 304.2852474862052645, 305.2998564053961559, 306.3128702044190845, 307.3242877611859285, 308.3341079878806568, 309.3423298307835125, 310.3489522700934913, 311.3539743197510461, 312.3573950272598836, 313.3592134735077366, 314.3594287725874210, 315.3580400716163581, 316.3550465505564375, 317.3504474220326870,
    318.3442419311518847, 319.3364293553204334, 320.3270090040620062, 321.3159802188345680, 322.3033423728469416, 323.2890948708754877, 324.2732371490794208, 325.2557686748170340, 326.2366889464603901, 327.2159974932104660, 328.1936938749119577, 329.1697776818672878, 330.1442485346508988, 331.1171060839231472, 332.0883500102438006, 333.0579800238855342,
    334.0259958646473706, 334.9923973016674950, 335.9571841332363533, 336.9203561866095811, 337.8819133178203629, 338.8418554114925314, 339.8001823806527000, 340.7568941665430771, 341.7119907384335420, 342.6654720934345164, 343.6173382563088694, 344.5675892792847890, 345.5162252418678577, 346.4632462506538104, 347.4086524391408943, 348.3524439675423992,
    349.2946210225995287, 350.2351838173941587, 351.1741325911615945, 352.1114676091035562, 353.0471891622015619, 353.9812975670301966, 354.9137931655703824, 355.8446763250232720, 356.7739474376241446, 357.7016069204562427, 358.6276552152655199, 359.5520927882746492, 360.4749201299982815, 361.3961377550578504, 362.3157462019971149, 363.2337460330975318,
    364.1501378341944246, 365.0649222144932082, 365.9780998063857282, 366.8896712652674523, 367.7996372693546050, 368.7079985195017571, 369.6147557390198699, 370.5199096734946806, 371.4234610906052580, 372.3254107799435246, 373.2257595528334946, 374.1245082421514780, 375.0216577021464559, 375.9172088082608525, 376.8111624569519904, 377.7035195655139432,
    378.5942810718995588, 379.4834479345434488, 380.3710211321849215, 381.2570016636921650, 382.1413905478859760, 383.0241888233649092, 383.9053975483303702, 384.7850178004123904, 385.6630506764960842, 386.5394972925485604, 387.4143587834461755, 388.2876363028029232, 389.1593310227985398, 390.0294441340080880, 390.8979768452315398, 391.7649303833240992,
    392.6303059930271502, 393.4941049367998858, 394.3563284946513363, 395.2169779639733633, 396.0760546593737672, 396.9335599125105318, 397.7894950719264670, 398.6438615028845902, 399.4966605872037348, 400.3478937230956376, 401.1975623250019112, 402.0456678234320975, 402.8922116648021756, 403.7371953112740357, 404.5806202405951240, 405.4224879459393946,
    406.2627999357483759, 407.1015577335734861, 407.9387628779184638, 408.7744169220828780, 409.6085214340063772, 410.4410779961133358, 411.2720882051584681, 412.1015536720731802, 412.9294760218122633, 413.7558568932020080, 414.5806979387883189, 415.4040008246857951, 416.2257672304280618, 417.0459988488179306, 417.8646973857789248, 418.6818645602073730,
    419.4975021038252976, 420.3116117610340439, 421.1241952887684192, 421.9352544563519132, 422.7447910453524855, 423.5528068494392642, 424.3593036742398112, 425.1642833371981283, 425.9677476674337413, 426.7696985056011272, 427.5701377037502198, 428.3690671251875983, 429.1664886443381874, 429.9624041466082644, 430.7568155282486941, 431.5497246962190730,
    432.3411335680530670, 433.1310440717238066, 433.9194581455107027, 434.7063777378666032, 435.4918048072858596, 436.2757413221733032, 437.0581892607137888, 437.8391506107425926, 438.6186273696167746, 439.3966215440867700, 440.1731351501695712, 440.9481702130217400, 441.7217287668142376, 442.4938128546069720, 443.2644245282249926, 444.0335658481349128,
    444.8012388833223554, 445.5674457111700235, 446.3321884173369085, 447.0954690956376112, 447.8572898479230844, 448.6176527839616597, 449.3765600213214384, 450.1340136852526825, 450.8900159085715700, 451.6445688315444613, 452.3976746017731330, 453.1493353740804650, 453.8995533103971525, 454.6483305796490413, 455.3956693576454882, 456.1415718269678905,
    456.8860401768598649, 457.6290766031171415, 458.3706833079792773, 459.1108625000212555, 459.8496163940463362, 460.5869472109795311, 461.3228571777617048, 462.0573485272446988, 462.7904234980868523, 463.5220843346497759, 464.2523332868951229, 464.9811726102829539, 465.7086045656700435, 466.4346314192096656, 467.1592554422516060, 467.8824789112429130,
    468.6043041076297868, 469.3247333177597511, 470.0437688327849628, 470.7614129485656918, 471.4776679655752787, 472.1925361888050361, 472.9060199276705134, 473.6181214959179897, 474.3288432115320461, 475.0381873966435932, 475.7461563774389220, 476.4527524840688102, 477.1579780505593930, 477.8618354147226342, 478.5643269180681046, 479.2654549057156146,
    479.9652217263078456, 480.6636297319244022, 481.3606812779961502, 482.0563787232204050, 482.7507244294766906, 483.4437207617431227, 484.1353700880138718, 484.8256747792166834, 485.5146372091317630, 486.2022597543106030, 486.8885447939961182, 487.5734947100431214, 488.2571118868393114, 488.9393987112275682, 489.6203575724279631, 490.2999908619612484,
    490.9783009735726296, 491.6552903031561072, 492.3309612486797846, 493.0053162101113458, 493.6783575893447846, 494.3500877901271906, 495.0205092179863868, 495.6896242801594212, 496.3574353855214554, 497.0239449445151081, 497.6891553690807654, 498.3530690725875161, 499.0156884697641430, 499.6770159766316510, 500.3370540104353950, 500.9958049895786872,
    501.6532713335564608, 502.3094554628896162, 502.9643597990602757, 503.6179867644471528, 504.2703387822620584, 504.9214182764862926, 505.5712276718085150, 506.2197693935622738, 506.8670458676647286, 507.5130595205558848, 508.1578127791380552, 508.8013080707162885, 509.4435478229390242, 510.0845344637396579, 510.7242704212783338, 511.3627581238844755,
    512.0000000000000000
};

inline float sin4096(int angle)
{
    angle &= 4095;

    if(angle <= 1024)
        return fsinTable[angle];
    else if(angle <= 2048)
        return fsinTable[2048 - angle];
    else if(angle <= 3072)
        return -fsinTable[angle - 2048];
    else
        return -fsinTable[4096 - angle];
}

inline float cos4096(int angle)
{
    return sin4096(angle + 1024);
}

inline float angle4096(int x, int y)
{
    const static int full_angle = 4096;
    const static int eighth    = full_angle / 8;
    const static int quarter_1 = full_angle / 4;
    const static int quarter_2 = full_angle / 2;
    const static int quarter_3 = quarter_1 + quarter_2;

    int a = x, b = y;
    int c = 0;

    if(a < 0)a = -a;
    if(y < 0)b = -b;

    if(a < b){//swap
        c = b;
        b = a;
        a = c;
        c = 1;
    }

    a = (b == 0) ? (0) : (b * eighth / a);
    float angle = fatanTable[a];

    //fix quarter
    if(c)angle = quarter_1 - angle;
    if(x < 0){
        if(y < 0){//quarter 3
            angle += quarter_2;
        }
        else{//quarter 2
            angle = quarter_2 - angle;
        }
    }
    else{
        if (y < 0){//quarter 4
            angle = full_angle - angle;
        }
    }

    return angle;
}


inline float fast_sin(float angle)
{
    return sin4096(f_toint(angle * M_INV_A_4096));
}

inline float fast_cos(float angle)
{
    return fast_sin(angle + 90.0f);
}

inline float fast_angle(float x, float y)
{
    return angle4096(f_toint(x), f_toint(y));
}

}//end namespace math
}//end namespace cgl

#endif //TRIGONOMETRY_HPP_20190604074218

/*
void gen_sinTable(int SIZE)
{
    String s;
    char buf[64];
    int j =0;
    int a;
    double m = SIZE * 4;
    double sine;
    double size = SIZE;
    for(int i=0; i<size+1; i+=1){
        //print(i*360/1024, i);
        //print(atan(i / fa) / M_RD * fa / 45, i / fa);//, a.sin(i));
        //int n = (std::atan(i/fa) * M_RRD * fa / 45.0 ) * 4096.0f;
        //sine = std::sin(i * M_RD * 90.0 / size);
        sine = std::atan(i / double(512)) * M_INV_RD * 512.0 / 45.0;
        //sine *= m;
        csprintf<char>(buf, 64, "%0.16f, ", sine);
        s += buf;
        if(++j == 16){ s += "\r\n"; j = 0; }
    }
    print(s.c_str());
}
*/
