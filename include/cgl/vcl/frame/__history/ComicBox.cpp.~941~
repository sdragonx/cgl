//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ComicBox.h"
#include <cgl/algorithm/zoomview.hpp>
#include <cgl/graphics/gdi/alphablend.hpp>
#include <cgl/graphics/gdi/bitmap.hpp>
#include <cgl/graphics/gdicontext.hpp>
#include <cgl/graphics/pixel.hpp>
#include <cgl/vcl.hpp>

#include <cgl/thread.hpp>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
//TComicBox *ComicBox;

extern void print(String);
extern void print(String, String);

const int WM_LOOP_FRAME = WM_USER + 10;
const int IMAGE_INIT_SIZE = 64;

thread gfx_thread;

void draw_polygon(TCanvas* dc, const std::vector< vec2i >& ls, int ox, int oy)
{
    if(ls.empty()){
        return ;
    }
    MoveToEx(dc->Handle, ox + ls[0].x, oy + ls[0].y, NULL);
    for(size_t i=1; i<ls.size(); ++i){
        LineTo(dc->Handle, ox + ls[i].x, oy + ls[i].y);
    }
}

void draw_polygon(TCanvas* dc, TControlPoints& ls)
{
    if(ls.Empty()){
        return ;
    }
    MoveToEx(dc->Handle, ls[0]->Position.x, ls[0]->Position.y, NULL);
    for(size_t i=1; i<ls.Size(); ++i){
        LineTo(dc->Handle, ls[i]->Position.x, ls[i]->Position.y);
    }
}

void FillBackground(HWND hwnd, HBITMAP bmp)
{
    PAINTSTRUCT ps;
    BeginPaint(hwnd, &ps);
    graphics::gdi::gdibrush brush;
    brush.create(bmp);
    FillRect(ps.hdc, &ps.rcPaint, brush.handle);
    Rectangle(ps.hdc, ps.rcPaint.left, ps.rcPaint.top, ps.rcPaint.right, ps.rcPaint.bottom);
    EndPaint(hwnd, &ps);
}

//---------------------------------------------------------------------------
__fastcall TComicBox::TComicBox(TComponent* Owner)
    : TFrame(Owner), Points(pnlBackground)
{
    pnlBackground->DoubleBuffered = true;
    pnlBackground->Align = alClient;
    //pnlBackground->WindowProc = PanelWndProc;
    pnlBackground->Realign();

    ComicView->Align = alClient;
    pntRuleLeft->Font->Orientation = 900;

    FZoom = 1.0f;

    ResizeSurface(ComicView->ClientWidth, ComicView->ClientHeight);
    ResizeImage(IMAGE_INIT_SIZE, IMAGE_INIT_SIZE);

    FMouseButton = TMouseButton(-1);

//    UpdateBounds();


    PenMode = 0;

    AutoPlay = true;
    DebugMode = false;

//    PointIndex = -1;
//    HotPoint = -1;
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::WndProc(TMessage& msg)
{
    switch(msg.Msg){
    case WM_CREATE:
        break;
    case WM_DESTROY:
        safe_delete(FSurface);
        break;
    case WM_GETDLGCODE://让窗体接受方向键和TAB键
        msg.Result = DLGC_WANTALLKEYS|DLGC_WANTARROWS|DLGC_WANTTAB;
        break;
    case WM_ERASEBKGND:
        msg.Result = 0;
        return ;
    case WM_MOUSEWHEEL:
        //TPoint(msg.LParamLo, msg.LParamHi)屏幕坐标？
        this->DoMouseWheel(TShiftState(), msg.WParam, toTPoint(FMouse));
        break;
    case WM_LOOP_FRAME:
        OnLoop();
        break;
    default:
        break;
    }
    this->Dispatch(&msg);
}

void __fastcall TComicBox::PanelWndProc(TMessage& msg)
{
    switch(msg.Msg){
    case WM_ERASEBKGND:
        msg.Result = 0;
        return ;
    case WM_PAINT:
        //FillBackground(pnlBackground->Handle, imgBackground->Picture->Bitmap->Handle);
        break;
    default:
        break;
    }
    SendTMessage(pnlBackground, msg);
}

void __fastcall TComicBox::Resize(void)
{
    
}

//转换窗口坐标为画板坐标
vec2i TComicBox::TransformPoint(int x, int y)
{
    x -= FBounds.x;
    y -= FBounds.y;
    x /= FZoom;
    y /= FZoom;
    return vec2i(x, y);
}

void TComicBox::ResizeSurface(int width, int height)
{
    if(!FSurface){
        FSurface = new Graphics::TBitmap;
    }
    FSurface->PixelFormat = pf32bit;
    FSurface->SetSize(width, height);
    pixelbuf.assign(FSurface);
    FViewport = vec4i(0, 0, width, height);
}

void TComicBox::ResizeImage(int width, int height)
{
    if(FImage.is_null()){
        FImage.create(width, height, CGL_BGRA);
    }
    else{
        FImage.resize(width, height);
    }
    image.assign(FImage);
    image.fill(0xFFFFFFFF);

    FSize = vec2i(width, height);
    FBounds = vec4i((Viewport.width - FSize.width) / 2, (Viewport.height - FSize.height) / 2, FSize.width, FSize.height);

    zoom_scene2D(FBounds, FZoom, FSize, vec3i(0, 0));
    bounds_range(FBounds, Viewport);
}

void __fastcall TComicBox::OnPaintBoundsChange(bool repaint_rule)
{
    //FBounds
    Points.SetProperty(FBounds.x, FBounds.y, FZoom);

    if(FCanvasUpdate)FCanvasUpdate(this);

    if(repaint_rule){
        pntRuleLeft->Repaint();
        pntRuleTop->Repaint();
    }
    ComicView->Repaint();
}

bool __fastcall TComicBox::DoMouseWheel(Classes::TShiftState Shift, int WheelDelta, const Types::TPoint &MousePos)
{
    vec3i mouse(MousePos.x, MousePos.y, WheelDelta);
    zoom_scene2D(FBounds, FZoom, FSize, mouse);
    bounds_range(FBounds, Viewport);
    OnPaintBoundsChange();

    char buf[32];
    snprintf(buf, 32, "%2.1f%%", FZoom * 100.0f);
    StatusText(3, buf);

    return true;
}
//---------------------------------------------------------------------------
//标尺
void __fastcall TComicBox::pntRuleTopPaint(TObject *Sender)
{
    pntRuleTop->Canvas->Brush->Color = clSilver;
    pntRuleTop->Canvas->FillRect(pntRuleTop->ClientRect);
	draw_rule_x(pntRuleTop->Canvas, pntRuleTop->Width - FBounds.x, pntRuleLeft->Width + FBounds.x, FZoom);
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::pntRuleLeftPaint(TObject *Sender)
{
    pntRuleLeft->Canvas->Brush->Color = clSilver ;
    pntRuleLeft->Canvas->FillRect(pntRuleLeft->ClientRect);
	pntRuleLeft->Canvas->Brush->Style = bsClear;
	draw_rule_y(pntRuleLeft->Canvas, pntRuleLeft->Height - FBounds.y, FBounds.y, FZoom);
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::ComicViewMouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y)
{
    FMouseButton = Button;
    //转换画板坐标
    vec2i p = TransformPoint(X, Y);
    if(this->OnMouseDown){
        this->OnMouseDown(this, Button, Shift, p.x, p.y);
    }
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::ComicViewMouseMove(TObject *Sender, TShiftState Shift, int X, int Y)
{
    if(PenMode == 0){
        if(FBounds.contains(X, Y)){
            ComicView->Cursor = crHandPoint;
        }
        else{
            ComicView->Cursor = crDefault;
        }
    }

    //print(toStr(TPoint(X, Y)));

//    lblPos->Caption = toStr(FMouse) + "\r\n" + toStr(FComicMouse);
//    lblPos->Left = X + 32;
//    lblPos->Top = Y + 32;

    //转换画板坐标
    vec2i p = TransformPoint(X, Y);

    if(FMouseButton == mbLeft){
        if(PenMode == 0){//移动画板
            FBounds.x += X - FMouse.x;
            FBounds.y += Y - FMouse.y;
            bounds_range(FBounds, Viewport);
            OnPaintBoundsChange();
        }
    }

    FMouse = vec2i(X, Y);
    FComicMouse = p;

    if(this->OnMouseMove){
        this->OnMouseMove(this, Shift, p.x, p.y);
    }

    char buf[32];
    snprintf(buf, 32, "X %4i Y %4i", FComicMouse.x, FComicMouse.y);
    StatusText(4, buf);

    print(toStr(Viewport), toStr(FBounds));
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::ComicViewMouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y)
{
    FMouseButton = TMouseButton(-1);
    //转换画板坐标
    vec2i p = TransformPoint(X, Y);
    if(this->OnMouseUp){
        this->OnMouseUp(this, Button, Shift, p.x, p.y);
    }
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::ComicViewPaint(TObject *Sender)
{
    //填充背景
    TCanvas* c = FSurface->Canvas;
    c->Brush->Bitmap = imgBackground->Picture->Bitmap;
    c->FillRect(ComicView->ClientRect);

    gdiplus::gdicontext dc(c->Handle);
    dc.effect_level(CGL_SPEED);

    //平铺
    if(keyboard.ctrl_state()){
        tile_image(pixelbuf, FBounds, image, bilinear_color);
    }
    else{
        copy_image<uint32_t>(pixelbuf, FBounds.x, FBounds.y, FBounds.width, FBounds.height,
            image,
            bilinear_color,
            source_alpha);
            //nearest_color<uint32_t>);
    }

    //绘制路径
    if(!Path.empty()){
        Gdiplus::GraphicsPath p;
        gdiplus::transform_path(p, Path);
        dc.scale(FZoom, FZoom);
        dc.translate(FBounds.x, FBounds.y);

        dc.draw_path(p);
    }

    //debug 控制点
    if(DebugMode){
        c->Brush->Style = bsClear;
        c->Rectangle(toTRect(FBounds));
        draw_polygon(c, Points);
    }

    //swap buffers
    ComicView->Canvas->Draw(0, 0, FSurface);
}
//---------------------------------------------------------------------------

TCanvas* __fastcall TComicBox::GetCanvas()
{
    return FSurface->Canvas;
}

//---------------------------------------------------------------------------

TPoint __fastcall TComicBox::GetCanvasOrg()
{
    return TPoint(FBounds.x, FBounds.y);
}

vec4i __fastcall TComicBox::GetViewport()
{
    return FViewport;//vec4i(0, 0, FSurface->Width, FSurface->Height);
}

TComicBoxUpdateEvent __fastcall TComicBox::GetUpdateEvent()
{
    return FCanvasUpdate;
}

void __fastcall TComicBox::SetUpdateEvent(TComicBoxUpdateEvent value)
{
    FCanvasUpdate = value;
}
//---------------------------------------------------------------------------
//
int gfx_function(thread* instance, void* param)
{
    while(instance->is_running()){
        SendMessage((HWND)param, WM_LOOP_FRAME, 0, 0);
        Sleep(40);
    }
    return 0;
}

int TComicBox::LoadImage(String filename)
{
    this->CloseImage();

    FImage.open(filename.c_str());

    if(!FImage.is_open()){
        return -1;
    }

    ILinfo info;
    iluGetImageInfo(&info);

    StatusText(0, filename);
    StatusText(1, String(info.Width) + 'x' + String(info.Height) + 'x' + String(info.Bpp*8));
    StatusText(2, "0/" + String(info.NumNext));
    StatusText(3, "100%");

    FImage.convert(IL_BGRA);

    image.assign(FImage);

    FSize = vec2i(FImage.width(), FImage.height());
    zoom_scene2D(FBounds, FZoom, FSize, vec3i(0, 0));
    bounds_range(FBounds, Viewport);
    FBounds.x = (Viewport.width - FBounds.width) / 2;
    FBounds.y = (Viewport.height - FBounds.height) / 2;
//    if(FBounds.x < 0)FBounds.x = 0;
//    if(FBounds.y < 0)FBounds.y = 0;

    //print(toStr(Viewport), toStr(FBounds));

    ComicView->Repaint();

    //gif自动播放
    if(AutoPlay && info.NumNext){
        FCurrentImage = 0;
        gfx_thread.create(gfx_function, Handle);
    }
    else{

    }

    return 0;
}
//---------------------------------------------------------------------------

void TComicBox::CloseImage()
{
    FImage.close();
    gfx_thread.stop();
}
//---------------------------------------------------------------------------

void TComicBox::OnLoop()
{
    int count = FImage.images.size();
    if(count == 0){
        return ;
    }

    ++FCurrentImage;
    if(FCurrentImage == count){
        FCurrentImage = 0;
    }

    FImage.images.active(FCurrentImage);
    image.assign(FImage);
    StatusText(2, String(FCurrentImage) + '/' + String(count));
    ComicView->Repaint();
}
//---------------------------------------------------------------------------

void __fastcall TComicBox::pnlBackgroundResize(TObject *Sender)
{
    vec2i oldCenter = Viewport.center();
    ResizeSurface(pnlBackground->ClientWidth, pnlBackground->ClientHeight);
    vec2i newCenter = Viewport.center();
    FBounds.x += newCenter.x - oldCenter.x;
    FBounds.y += newCenter.y - oldCenter.y;

    OnPaintBoundsChange(false);
}
//---------------------------------------------------------------------------

