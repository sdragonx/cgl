/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 typedef.hpp

 2020-05-28 15:32:13

*/
#ifndef ZIP_TYPEDEF_HPP_20200528153213
#define ZIP_TYPEDEF_HPP_20200528153213

#include <cgl/public.h>
#include <cgl/io/file.hpp>
#include <cgl/string.hpp>
#include <cgl/zlib.hpp>

namespace cgl{
namespace io{

//zip版本
const int ZIP_VER_A  = 0x000A;  //未压缩未加密
const int ZIP_VER_14 = 0x0014;  //传统解密、解压所需版本
const int ZIP_VER_1F = 0x001F;  //传统加密、压缩所需版本
const int ZIP_VER_33 = 0x0033;  //AES decrypto

//ZIP_LIST_FILE
//ZIP_LIST_DATA
//ZIP_LIST_CDATA
//ZIP_LIST_MAIN

//zip表项类型
enum ZIP_LIST_TYPE
{
    ZIP_TYPE_LIST  = 0x02014b50,    //zip directory
    ZIP_TYPE_FILE  = 0x04034b50,    //zip identifier
    ZIP_TYPE_END   = 0x06054b50,
    ZIP_TYPE_EXTRA = 0x08064b50,    //Archive extra data record
    ZIP_TYPE_DATA  = 0x08074b50,
};

//ZIP_FLAGS
enum ZIP_FLATS
{
    ZIP_ENCRYPTED = 0x01    //加密
};

//加密模式
enum ZIP_CRYPTO_MODE
{
    ZIP_CRYPTO_NONE,
    ZIP_CRYPTO_PKCRYPT,
    ZIP_CRYPTO_AES128,
    ZIP_CRYPTO_AES192,
    ZIP_CRYPTO_AES256,
};

const uint16_t ZIP_EXTRA_FIELD_WINZIP_AES = 0x9901;

/*
 压缩模式
  0 - The file is stored (no compression)
  1 - The file is Shrunk
  2 - The file is Reduced with compression factor 1
  3 - The file is Reduced with compression factor 2
  4 - The file is Reduced with compression factor 3
  5 - The file is Reduced with compression factor 4
  6 - The file is Imploded
  7 - Reserved for Tokenizing compression algorithm
  8 - The file is Deflated
  9 - Enhanced Deflating using Deflate64(tm)
 10 - PKWARE Data Compression Library Imploding
 11 - Reserved by PKWARE
 12 - File is compressed using BZIP2 algorithm
*/
enum ZIP_COMPRESS_MODE
{
    ZIP_STORED,
    ZIP_DEFLATED = 8,
    ZIP_AES256   = 0x63,
};

//错误
enum ZIP_ERROR{
    ZIP_OK,
    ZIP_ERROR_DATA,         //数据格式错误
    ZIP_ERROR_ENCRYPT,      //加密错误
    ZIP_ERROR_DECRYPT,      //解密错误
    ZIP_ERROR_PASSWORD,     //密码错误
    ZIP_ERROR_FILE,         //文件错误
};

//
// 结构体
//

#pragma pack(push, 1)

struct ZIP_FILE32{
    uint16_t unzip_version;     //解压缩所需pkware最低版本
    uint16_t flag;              //通用比特标志
    uint16_t compress_mode;     //压缩方式 0x00 没有压缩 0x08 压缩 0x63 加密
    uint32_t time;              //文件最后修改时间 WORD date/ WORD time
    uint32_t crc32;
    uint32_t compressed_size;   //压缩数据大小
    uint32_t source_size;       //源文件大小
    uint16_t name_length;       //文件名称长度
    uint16_t extra_size;        //扩展字段长度
    //char    name[];
    //char    extra[];
};

struct ZIP_FILE64{
    uint16_t unzip_version;     //解压缩所需pkware最低版本
    uint16_t flag;              //通用比特标志
    uint16_t compress_mode;     //压缩方式 0x00 没有压缩 0x08 压缩 0x63 加密
    uint32_t time;              //文件最后修改时间 WORD date/ WORD time
    uint32_t crc32;
    uint64_t compressed_size;   //压缩数据大小
    uint64_t source_size;       //源文件大小
    uint16_t name_length;       //文件名称长度
    uint16_t extra_size;        //扩展字段长度
    //char    name[];
    //char    extra[];
};

struct ZIP_DATA32
{
    uint32_t crc;
    uint32_t compressed_size;
    uint32_t source_size;
};

struct ZIP_DATA64
{
    uint32_t crc;
    uint64_t compressed_size;
    uint64_t source_size;
};

struct ZIP_LIST32{
    uint16_t zip_version;       //压缩版本
    uint16_t unzip_version;     //解压缩所需pkware最低版本
    uint16_t flag;              //通用比特标志
    uint16_t compress_mode;     //压缩方式
    uint32_t time;
    uint32_t crc32;
    uint32_t compressed_size;   //压缩数据大小  64
    uint32_t source_size;       //源文件大小    64
    uint16_t name_length;       //文件名称长度
    uint16_t extra_size;        //扩展字段长度
    uint16_t comment_size;      //文件注释长度
    uint16_t disk;              //文件开始的分卷号
    uint16_t inner_attrib;      //文件内部属性
    uint32_t attrib;            //文件外部属性
    uint32_t local_offset;      //对应文件实体在文件中的偏移
    //char    name[];
    //char    extra[];
    //char    comment[];
};

struct ZIP_LIST64{
    uint16_t zip_version;       //压缩版本
    uint16_t unzip_version;     //解压缩所需pkware最低版本
    uint16_t flag;              //通用比特标志
    uint16_t compress_type;     //压缩方式
    uint32_t time;
    uint32_t crc32;
    uint64_t compressed_size;   //压缩数据大小  64
    uint64_t source_size;       //源文件大小    64
    uint16_t name_length;       //文件名称长度
    uint16_t extra_size;        //扩展字段长度
    uint16_t comment_size;      //文件注释长度
    uint16_t disk;              //文件开始的分卷号
    uint16_t inner_attrib;      //文件内部属性
    uint32_t attrib;            //文件外部属性
    uint32_t local_offset;      //对应文件实体在文件中的偏移
    //char    name[];
    //char    extra[];
    //char    comment[];
};

struct ZIP_ENDLIST32{
    uint16_t disk;              //当前分卷号
    uint16_t disk_start;        //Central Directory的开始分卷号
    uint16_t disk_count;        //当前分卷Central Directory的记录数量
    uint16_t dir_count;         //Central Directory的总记录数量
    uint32_t dir_size;          //Central Directory的大小 (bytes)
    uint32_t dir_offset;        //Central Directory的开始位置偏移
    uint16_t comment_size;      //Zip文件注释长度(n)
    //char    comment[0];
};

struct ZIP_EXTRA_NTFS
{
    uint16_t id;        //ntfs 0x000a
    uint16_t size;      //sizeof extra data
    uint32_t reserved;
    uint16_t attribute;
    uint16_t attribute_size;
    FILETIME mtime;     //motify time
    FILETIME atime;     //access time
    FILETIME ctime;     //create time
    //byte_t crypto[11];//加密的还有11个字节的密匙
};

struct ZIP_EXTRA_AES
{
	uint16_t tag;           //0x9901
	uint16_t size;          //7
	uint16_t aes_version;   //AES_VERSION 1 ? 2
	uint16_t code;          //"AE"
	uint8_t  mode;	        //AES_ENCRYPTIONMODE 3
	uint16_t compress_mode; //8
};

struct ziplist
{
    uint32_t type;
    union{
        ZIP_FILE32 file32;
        ZIP_FILE64 file64;
        ZIP_LIST32 list32;
        ZIP_LIST64 list64;
        ZIP_ENDLIST32 endlist32;
        ZIP_DATA32 data32;
        ZIP_DATA64 data64;
    };
    char filename[256];
    char extra[64];
    char comment[0];
    fsize_t offset;
};

#pragma pack(pop)


//读取一个表项，返回这个数据块尾部文件指针
fsize_t ziplist_read(ziplist& z, io::unifile* f, fsize_t offset)
{
    size_t size;

    f->seek(offset, SEEK_SET);
    f->readle<uint32_t>(z.type);
    z.offset = offset;
    offset += 4;

    switch(z.type){
    case ZIP_TYPE_LIST: //zip directory
        size = sizeof(ZIP_LIST32);
        f->read(&z.list32, size);
        f->read(z.filename, z.list32.name_length);
        z.filename[z.list32.name_length] = '\0';
        f->read(z.extra, z.list32.extra_size);
        //CGL_LOG("list: %-16s flag: %i extra: %i offset: %i", list.filename, list.list32.flag, list.list32.extra_size, list.list32.local_offset);
        offset += size + z.list32.name_length + z.list32.extra_size + z.list32.comment_size;;
        break;
    case ZIP_TYPE_FILE: //zip file
        size = sizeof(ZIP_FILE32);
        f->read(&z.file32, size);
        f->read(z.filename, z.file32.name_length);
        z.filename[z.file32.name_length] = '\0';
        f->read(z.extra, z.file32.extra_size);
        //CGL_LOG("file: %-16s extra: %i", list.filename, file.extra_size);
        offset += size + z.file32.name_length + z.file32.extra_size + z.file32.compressed_size;
        break;
    case ZIP_TYPE_END:  //zip end cdir
        size = sizeof(ZIP_ENDLIST32);
        f->read(&z.endlist32, size);
        //comments.resize(m_endcdata.comment_size);
        //size = f->read(comments.data(), m_endcdata.comment_size);

        //CGL_LOG("zipEnd: comment: %u text: %s", m_endcdata.comment_size, comments.c_str());//tohex(buf, data, size));

        break;
//    case ZIP_TYPE_EXTRA://Archive extra data record
//        break;
    case ZIP_TYPE_DATA: //zip data
        offset += sizeof(ZIP_DATA32);
        break;
    default:
        CGL_LOG_ERROR("ziplist_read error %x.", type);
        break;
    }

    return offset;
}

//写入一个表项，返回这个数据块尾部文件指针
fsize_t write_ziplist(const ziplist& z, io::unifile* f)
{
    size_t size;

    f->seek(z.offset, SEEK_SET);
    f->writele<uint32_t>(z.type);

    switch(z.type){
    case ZIP_TYPE_LIST: //zip directory
        size = sizeof(ZIP_LIST32);
        f->write(&z.list32, size);
        f->write(z.filename, z.list32.name_length);
        f->write(z.extra, z.list32.extra_size);
        break;
    case ZIP_TYPE_FILE: //zip file
        size = sizeof(ZIP_FILE32);
        f->write(&z.file32, size);
        f->write(z.filename, z.file32.name_length);
        f->write(z.extra, z.file32.extra_size);
        break;
    case ZIP_TYPE_END:  //zip end cdir
        size = sizeof(ZIP_ENDLIST32);
        f->write(&z.endlist32, size);
        //comments.resize(m_endcdata.comment_size);
        //size = f->read(comments.data(), m_endcdata.comment_size);

        break;
//    case ZIP_TYPE_EXTRA://Archive extra data record
//        break;
    case ZIP_TYPE_DATA: //zip data
        size = sizeof(ZIP_DATA32);
        f->write(&z.data32, size);
        break;
    default:
        CGL_LOG_ERROR("ziplist_read error.");
        break;
    }

    return f->tell();

}

}//end namespace io
}//end namespace cgl

#endif //ZIP_TYPEDEF_HPP_20200528153213
