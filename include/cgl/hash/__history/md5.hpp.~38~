/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 md5.hpp

 2010-08-19 16:19:18

*/
#ifndef MD5_HPP_20100819161918
#define MD5_HPP_20100819161918

#include <cgl/public.h>
#include <cgl/stdlib.hpp>

namespace cgl{

class md5_t
{
public:
    const static int length = 16;
    struct context
    {
        union
        {
            uint32_t state[4];
            uint8_t  data[16];
        };
        uint32_t count[2];
        union
        {
            uint8_t buffer[64];
            char    str[64];
        };
    };

private:
    const static uint32_t S11 = 7;
    const static uint32_t S12 = 12;
    const static uint32_t S13 = 17;
    const static uint32_t S14 = 22;
    const static uint32_t S21 = 5;
    const static uint32_t S22 = 9;
    const static uint32_t S23 = 14;
    const static uint32_t S24 = 20;
    const static uint32_t S31 = 4;
    const static uint32_t S32 = 11;
    const static uint32_t S33 = 16;
    const static uint32_t S34 = 23;
    const static uint32_t S41 = 6;
    const static uint32_t S42 = 10;
    const static uint32_t S43 = 15;
    const static uint32_t S44 = 21;

    context m_context;

public:
    md5_t();
    void reset();
    void update(const void* buffer, uint32_t size);
    void finish(void* buffer = NULL);
    const void* data() const { return m_context.data; }
    const char* str()  const { return m_context.str;  }

private:
    uint32_t F(uint32_t X, uint32_t Y, uint32_t Z);
    uint32_t G(uint32_t X, uint32_t Y, uint32_t Z);
    uint32_t H(uint32_t X, uint32_t Y, uint32_t Z);
    uint32_t I(uint32_t X, uint32_t Y, uint32_t Z);

    uint32_t ROTATE_LEFT(uint32_t X,uint32_t N);

    uint32_t FF(uint32_t A,uint32_t B,uint32_t C,uint32_t D,uint32_t X,uint32_t L,uint32_t AC);
    uint32_t GG(uint32_t A,uint32_t B,uint32_t C,uint32_t D,uint32_t X,uint32_t L,uint32_t AC);
    uint32_t HH(uint32_t A,uint32_t B,uint32_t C,uint32_t D,uint32_t X,uint32_t L,uint32_t AC);
    uint32_t II(uint32_t A,uint32_t B,uint32_t C,uint32_t D,uint32_t X,uint32_t L,uint32_t AC);

    void transform (const uint8_t *lpInput);
    void decode(uint32_t *lpOutput, const uint8_t *lpInput,  uint32_t dwLength);
    void encode(uint8_t *lpOutput,  const uint32_t *lpInput, uint32_t dwLength);
    char GetChar(uint8_t btValue);
};

md5_t::md5_t()
{
    reset();
}

void md5_t::reset()
{
    m_context.count[0] = 0;
    m_context.count[1] = 0;
    m_context.state[0] = 0x67452301L;
    m_context.state[1] = 0xefcdab89L;
    m_context.state[2] = 0x98badcfeL;
    m_context.state[3] = 0x10325476L;
}

void md5_t::update(const void* buffer, uint32_t size)
{
    uint32_t i, index, partLen;
    index = (m_context.count[0] >> 3) & 0x3F;

    uint32_t tmp1, tmp2;
    const uint8_t* lpSrc = reinterpret_cast<const uint8_t*>(buffer);

    tmp1 = size << 3;
    tmp2 = tmp1 + m_context.count[0];
    m_context.count[0] = tmp2;
    if(tmp2 < tmp1){
        m_context.count[1]++;
    }
    m_context.count[1] += size >> 29;
    partLen = 64 - index;

    if(size >= partLen){
        memcpy(&m_context.buffer[index], buffer, partLen);
        transform(m_context.buffer);
        for(i=partLen; i+63<size; i+=64){
            transform(&lpSrc[i]);
        }
        index=0;
    }
    else{
        i=0;
    }
    memcpy(&m_context.buffer[index], &lpSrc[i], size-i);
}

void md5_t::finish(void* buffer)
{
    uint8_t  PADDING[64] = { 0x80 };
    uint8_t  bits[8];
    uint32_t index, padLen;

    encode(bits, m_context.count, 8);
    index=(m_context.count[0]>>3)&0x3f;
    padLen = (index < 56) ? (56 - index) : (120 - index);
    update(PADDING, padLen);
    update(bits, 8);

    encode(m_context.data, m_context.state, length);
    if(buffer)memcpy(buffer, m_context.data, length);
    tohex(m_context.str, m_context.data, length);
}

void md5_t::encode(uint8_t *lpOutput, const uint32_t *lpInput, uint32_t dwLength)
{
    uint32_t j, tmp;
    for(j=0; j<dwLength; j+=4)
    {
        tmp=*lpInput++;
        *lpOutput++=(uint8_t)(tmp&0xff);
        tmp=tmp>>8;
        *lpOutput++=(uint8_t)(tmp&0xff);
        tmp=tmp>>8;
        *lpOutput++=(uint8_t)(tmp&0xff);
        tmp=tmp>>8;
        *lpOutput++=(uint8_t)(tmp&0xff);
    }
}

void md5_t::decode(uint32_t *lpOutput, const uint8_t *lpInput, uint32_t dwLength)
{
    uint32_t j;
    for(j=0; j<dwLength; j+=4)
    {
        *lpOutput=(uint32_t)(*lpInput++);
        *lpOutput|=(((uint32_t)(*lpInput++))<<8);
        *lpOutput|=(((uint32_t)(*lpInput++))<<16);
        *lpOutput|=(((uint32_t)(*lpInput++))<<24);
        lpOutput++;
    }
}

inline uint32_t md5_t::F(uint32_t X, uint32_t Y, uint32_t Z)
{
    return (X & Y) | ((~X) & Z);
}

inline uint32_t md5_t::G(uint32_t X, uint32_t Y, uint32_t Z)
{
    return (X & Z) | (Y & (~Z));
}
inline uint32_t md5_t::H(uint32_t X, uint32_t Y, uint32_t Z)
{
    return X ^ Y ^ Z;
}
inline uint32_t md5_t::I(uint32_t X, uint32_t Y, uint32_t Z)
{
    return Y ^ (X | (~Z));
}

inline uint32_t md5_t::ROTATE_LEFT(uint32_t X, uint32_t N)
{
    return (X << N) | (X >> (32 - N));
}


inline uint32_t md5_t::FF(uint32_t A, uint32_t B, uint32_t C, uint32_t D, uint32_t X, uint32_t L, uint32_t AC)
{
    A += F(B, C, D) + X + AC;
    A  = ROTATE_LEFT(A, L);
    return A + B;
}

inline uint32_t md5_t::GG(uint32_t A, uint32_t B, uint32_t C, uint32_t D, uint32_t X, uint32_t L, uint32_t AC)
{
    A += G(B, C, D) + X + AC;
    A =  ROTATE_LEFT(A, L);
    return A + B;
}

inline uint32_t md5_t::HH(uint32_t A, uint32_t B, uint32_t C, uint32_t D, uint32_t X, uint32_t L, uint32_t AC)
{
    A += H(B, C, D) + X + AC;
    A =  ROTATE_LEFT(A, L);
    return A + B;
}

inline uint32_t md5_t::II(uint32_t A, uint32_t B, uint32_t C, uint32_t D, uint32_t X, uint32_t L, uint32_t AC)
{
    A += I(B, C, D) + X + AC;
    A =  ROTATE_LEFT(A, L);
    return A + B;
}

void md5_t::transform(const uint8_t *lpInput)
{
    //UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];
    uint32_t a, b, c, d, x[16];
    a = m_context.state[0];
    b = m_context.state[1];
    c = m_context.state[2];
    d = m_context.state[3];
    decode(x, lpInput, 64);

    /* Round 1 */
    a = FF(a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
    d = FF(d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
    c = FF(c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
    b = FF(b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
    a = FF(a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
    d = FF(d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
    c = FF(c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
    b = FF(b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
    a = FF(a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
    d = FF(d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
    c = FF(c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
    b = FF(b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
    a = FF(a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
    d = FF(d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
    c = FF(c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
    b = FF(b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

    /* Round 2 */
    a = GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
    d = GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
    c = GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
    b = GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
    a = GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
    d = GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
    c = GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
    b = GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
    a = GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
    d = GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
    c = GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
    b = GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
    a = GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
    d = GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
    c = GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
    b = GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

    /* Round 3 */
    a = HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
    d = HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
    c = HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
    b = HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
    a = HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
    d = HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
    c = HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
    b = HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
    a = HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
    d = HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
    c = HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
    b = HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
    a = HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
    d = HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
    c = HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
    b = HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

    /* Round 4 */
    a = II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
    d = II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
    c = II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
    b = II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */

    a = II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
    d = II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
    c = II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
    b = II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */

    a = II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
    d = II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
    c = II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
    b = II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */

    a = II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
    d = II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
    c = II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
    b = II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

    m_context.state[0] += a;
    m_context.state[1] += b;
    m_context.state[2] += c;
    m_context.state[3] += d;
}

}//end namespace cgl

#endif //MD5_HPP_20100819161918
