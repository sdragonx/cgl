/*
 Copyright (c) 2005-2020 sdragonx (mail:sdragonx@foxmail.com)

 sha1.hpp

 2020-03-22 13:28:42

*/
#ifndef SHA1_HPP_20200322132842
#define SHA1_HPP_20200322132842

#include <cgl/public.h>
#include <cgl/stdlib.hpp>

namespace cgl{
namespace hash{

//boost/uuid/detail/sha1.hpp
class sha1
{
public:
    typedef uint32_t digest_type[5];

private:
    uint32_t hash_data[5];
    byte_t block[64];
    size_t block_byte_index;
    size_t bit_count_low;
    size_t bit_count_high;

public:
    sha1();

    void reset();

    void update(byte_t byte);
    void update(const void* buffer, size_t byte_count);

    void finish(digest_type& digest);

    const uint32_t* data()const
    {
        return hash_data;
    }

    const char* str()const
    {
        tohex32(buf, n[0]);
        tohex32(buf+8, n[1]);
        tohex32(buf+16, n[2]);
        tohex32(buf+24, n[3]);
        tohex32(buf+32, n[4]);
    }

private:
    inline uint32_t left_rotate(uint32_t x, std::size_t n)
    {
        return (x<<n) ^ (x>> (32-n));
    }
    void process_block();
    void process_byte_impl(byte_t byte);
};

inline sha1::sha1()
{
    reset();
}

inline void sha1::reset()
{
    hash_data[0] = 0x67452301;
    hash_data[1] = 0xEFCDAB89;
    hash_data[2] = 0x98BADCFE;
    hash_data[3] = 0x10325476;
    hash_data[4] = 0xC3D2E1F0;

    block_byte_index = 0;
    bit_count_low = 0;
    bit_count_high = 0;
}

inline void sha1::update(const void* buffer, size_t size)
{
    const byte_t* begin = static_cast<const byte_t*>(buffer);
    const byte_t* end = begin + size;
    for(; begin != end; ++begin) {
        this->update(*begin);
    }
}

inline void sha1::update(byte_t byte)
{
    process_byte_impl(byte);

    // size_t max value = 0xFFFFFFFF
    //if (bit_count_low + 8 >= 0x100000000) { // would overflow
    //if (bit_count_low >= 0x100000000-8) {
    if (bit_count_low < 0xFFFFFFF8) {
        bit_count_low += 8;
    } else {
        bit_count_low = 0;

        if (bit_count_high <= 0xFFFFFFFE) {
            ++bit_count_high;
        } else {
            //BOOST_THROW_EXCEPTION(std::runtime_error("sha1 too many bytes"));
        }
    }
}

inline void sha1::process_byte_impl(byte_t byte)
{
    block[block_byte_index++] = byte;

    if (block_byte_index == 64) {
        block_byte_index = 0;
        process_block();
    }
}

inline void sha1::process_block()
{
    uint32_t w[80];
    for (size_t i=0; i<16; ++i) {
        w[i]  = (block[i*4 + 0] << 24);
        w[i] |= (block[i*4 + 1] << 16);
        w[i] |= (block[i*4 + 2] << 8);
        w[i] |= (block[i*4 + 3]);
    }
    for (size_t i=16; i<80; ++i) {
        w[i] = left_rotate((w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16]), 1);
    }

    uint32_t a = hash_data[0];
    uint32_t b = hash_data[1];
    uint32_t c = hash_data[2];
    uint32_t d = hash_data[3];
    uint32_t e = hash_data[4];

    uint32_t f;
    uint32_t k;
    uint32_t temp;
    for (size_t i=0; i<80; ++i) {
        if (i<20) {
            f = (b & c) | (~b & d);
            k = 0x5A827999;
        } else if (i<40) {
            f = b ^ c ^ d;
            k = 0x6ED9EBA1;
        } else if (i<60) {
            f = (b & c) | (b & d) | (c & d);
            k = 0x8F1BBCDC;
        } else {
            f = b ^ c ^ d;
            k = 0xCA62C1D6;
        }

        temp = left_rotate(a, 5) + f + e + k + w[i];
        e = d;
        d = c;
        c = left_rotate(b, 30);
        b = a;
        a = temp;
    }

    hash_data[0] += a;
    hash_data[1] += b;
    hash_data[2] += c;
    hash_data[3] += d;
    hash_data[4] += e;
}

inline void sha1::finish(digest_type& digest)
{
    // append the bit '1' to the message
    process_byte_impl(0x80);

    // append k bits '0', where k is the minimum number >= 0
    // such that the resulting message length is congruent to 56 (mod 64)
    // check if there is enough space for padding and bit_count
    if (block_byte_index > 56) {
        // finish this block
        while (block_byte_index != 0) {
            process_byte_impl(0);
        }

        // one more block
        while (block_byte_index < 56) {
            process_byte_impl(0);
        }
    } else {
        while (block_byte_index < 56) {
            process_byte_impl(0);
        }
    }

    // append length of message (before pre-processing)
    // as a 64-bit big-endian integer
    process_byte_impl( static_cast<byte_t>((bit_count_high>>24) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_high>>16) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_high>>8 ) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_high)     & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_low>>24) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_low>>16) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_low>>8 ) & 0xFF) );
    process_byte_impl( static_cast<byte_t>((bit_count_low)     & 0xFF) );

    // get final digest
    memcpy(digest, hash_data, sizeof(digest_type));
}

}//end namespace hash
}//end namespace cgl

#endif //SHA1_HPP_20200322132842
