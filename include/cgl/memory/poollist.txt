

template <typename T, size_t PAGE>
class poollist
{
public:
	typedef poollist          this_type;
	typedef T                 value_type;
	typedef value_type*       pointer;
	typedef const value_type* const_pointer;
	typedef value_type&       reference;
	typedef const value_type& const_reference;
	typedef std::size_t       size_type;
	typedef std::ptrdiff_t    difference_type;

	const static size_t PAGE_SIZE = PAGE;

private:
	struct node{
		node* prev;
		node* next;
		value_type value;
	};

	node* m_first;	//first node
	node* m_last;	//last node
	node* entry;	//free space entry
	dynamic_array<void*> poolbuf;

public:
	poollist() : m_first(), m_last(), entry()
	{
	}

	poollist(const this_type&) : entry()
	{
	}

	~poollist()
	{
		this->dispose();
	}

	this_type& operator=(const this_type&)
	{
		return *this;
	}

	bool operator==(const this_type&)
	{
		return true;
	}

	bool operator!=(const this_type&)
	{
		return false;
	}

	pointer allocate(size_type size = 1, const_pointer = 0)
	{
		CGL_ASSERT(size == 1);
		if(!entry){
			node* buf = allocate_buffer();
			entry = buf;
		}
		node* n = entry;
		entry = entry->next;
		return this->address(n);
	}

	pointer allocate(size_type n, size_type alignment, const_pointer = 0)
	{
		CGL_ASSERT(false);
		return null;
	}

	void deallocate(pointer p, size_type = 0)
	{
		node * n = node_pointer(p);
		n->next = entry;
		entry = n;
	}

	pointer reallocate(pointer ptr, size_type n)
	{
		CGL_ASSERT(false);
		return null;
	}

	void dispose()
	{
		for(size_type i = 0; i < poolbuf.size(); ++i)
		{
			deallocate_buffer(poolbuf[i]);
		}
		poolbuf.clear();
		entry = null;
	}

	size_type max_size()const
	{
		return static_cast<size_type>(-1)/sizeof(T);
	}

	size_type size()const
	{
		return poolbuf.size() * PAGE_SIZE;
	}

	//统计自由空间大小
	size_type free_size()const
	{
		size_type n = 0;
		node* p = entry;
		while(p){
			++n;
			p = p->next;
		}
		return n;
	}

	void construct(pointer p, const value_type& x)
	{
		//new(p) value_type(x);
	}

	void construct(pointer p)
	{
		//new (p) value_type();
	}

	void destroy(pointer p)
	{
		//p->~T();
	}
private:
	node* allocate_buffer()
	{
		node* buf = new node[PAGE_SIZE];
		//node* buf = static_cast<node*>(malloc(PAGE_SIZE * sizeof(node)));

		for(size_type i=0; i<PAGE_SIZE; ++i){
			buf[i].next = buf + i + 1;
		}
		buf[PAGE_SIZE - 1].next = null;
		poolbuf.push_back(buf);
		return buf;
	}

	void deallocate_buffer(void* &buf)
	{
		node* p = static_cast<node*>(buf);
		delete []p;
		buf = null;
	}

	pointer address(node* n)
	{
		return &n->value;
	}

	node* node_pointer(void* p)
	{
		return reinterpret_cast<node*>(reinterpret_cast<byte_t*>(p) - sizeof(node*));
	}
};
